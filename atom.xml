<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏小蜂的个人博客</title>
  
  <subtitle>放慢脚步，享受生活！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hi2048.github.io/"/>
  <updated>2021-09-05T02:58:19.188Z</updated>
  <id>http://hi2048.github.io/</id>
  
  <author>
    <name>Jsu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统性思维</title>
    <link href="http://hi2048.github.io/2021/09/01/%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
    <id>http://hi2048.github.io/2021/09/01/系统性思维/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2021-09-05T02:58:19.188Z</updated>
    
    <content type="html"><![CDATA[<p>系统性思维与局部性思维</p><p>  <strong> 系统性思维做出决策，然后在局部中做出选择 </strong>。<strong> 先有方向再有选择 </strong>，而不是随便做出了选择，然后再从选择中确定方向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统性思维与局部性思维&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt; 系统性思维做出决策，然后在局部中做出选择 &lt;/strong&gt;。&lt;strong&gt; 先有方向再有选择 &lt;/strong&gt;，而不是随便做出了选择，然后再从选择中确定方向。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈生活</title>
    <link href="http://hi2048.github.io/2021/05/05/%E6%B5%85%E8%B0%88%E7%94%9F%E6%B4%BB/"/>
    <id>http://hi2048.github.io/2021/05/05/浅谈生活/</id>
    <published>2021-05-04T16:00:00.000Z</published>
    <updated>2021-08-06T08:30:11.229Z</updated>
    
    <content type="html"><![CDATA[<p>生活就像一面镜子，你投入什么，它就会回应相同的东西。 所以当我在对着生活发怒，抱怨的时候，是不是应该想想，我投入了什么。</p><p>日子过得太快，每天都是机械的，重复的，唯一不同的是，孩子在慢慢长大，每当看着他那无忧无虑的笑声，我都会想为什么我不能也这样呢。如果仔细想想，却也是不大可能，因为我们有太多的东西要承担，这就注定了不能像孩子那样。但是幸运的是，在这里，我有记录，3年，5年，还有更早的自己，心境，以及生活。每每看到这些，我都会笑得像个孩子。这将让我可以更加坚定的站立在当下。</p><p>所以请放慢脚步，张开双臂，闭上眼睛，感受生活的伟大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生活就像一面镜子，你投入什么，它就会回应相同的东西。 所以当我在对着生活发怒，抱怨的时候，是不是应该想想，我投入了什么。&lt;/p&gt;
&lt;p&gt;日子过得太快，每天都是机械的，重复的，唯一不同的是，孩子在慢慢长大，每当看着他那无忧无虑的笑声，我都会想为什么我不能也这样呢。如果仔细想想
      
    
    </summary>
    
      <category term="杂谈" scheme="http://hi2048.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrum笔记</title>
    <link href="http://hi2048.github.io/2021/05/02/Scrum%E7%AC%94%E8%AE%B0/"/>
    <id>http://hi2048.github.io/2021/05/02/Scrum笔记/</id>
    <published>2021-05-02T06:21:41.000Z</published>
    <updated>2021-09-05T02:24:18.442Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Scrum 采用<strong>迭代、增量</strong>的方法来优化可预见性并控制风险。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Scrum 采用&lt;strong&gt;迭代、增量&lt;/strong&gt;的方法来优化可预见性并控制风险。&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈谈拖延症</title>
    <link href="http://hi2048.github.io/2021/01/09/%E8%B0%88%E8%B0%88%E6%8B%96%E5%BB%B6%E7%97%87/"/>
    <id>http://hi2048.github.io/2021/01/09/谈谈拖延症/</id>
    <published>2021-01-08T16:00:00.000Z</published>
    <updated>2021-09-09T08:22:29.604Z</updated>
    
    <content type="html"><![CDATA[<pre>1月1日新开这本日记，也为了督促自己后面多下些苦功。1. 先要读完手边的<the moon and sixpence>2. 考取GCP3. 加强自己的英语听力和口语4. 学习管理方面的知识5. 开始理财并制定计划6. 加强锻炼并保持健康1月2日打牌1月3日打牌1月4日打牌1月5日刷微博，水贴1月6日刷微博，水贴1月7日打牌1月8日刷微博，水贴</the></pre><p><strong>我本可以</strong>， 不要让自己在将来后悔，需要正视并做出改变。</p><ol><li>把自己的目标大声讲出来<ul><li>周围人的压力会让你开始执行计划</li></ul></li><li>利用帕金森定律，设定一个Deadline</li><li>把大的目标<strong>分解</strong>成细小的目标</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;
1月1日
新开这本日记，也为了督促自己后面多下些苦功。
1. 先要读完手边的&lt;the moon and sixpence&gt;
2. 考取GCP
3. 加强自己的英语听力和口语
4. 学习管理方面的知识
5. 开始理财并制定计划
6. 加强锻炼并保持健康

1月2日
打
      
    
    </summary>
    
      <category term="杂谈" scheme="http://hi2048.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="团队" scheme="http://hi2048.github.io/tags/%E5%9B%A2%E9%98%9F/"/>
    
      <category term="Scrum Master" scheme="http://hi2048.github.io/tags/Scrum-Master/"/>
    
  </entry>
  
  <entry>
    <title>团队的思考</title>
    <link href="http://hi2048.github.io/2020/10/19/%E5%9B%A2%E9%98%9F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://hi2048.github.io/2020/10/19/团队的思考/</id>
    <published>2020-10-18T16:00:00.000Z</published>
    <updated>2021-09-09T08:10:14.242Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>交付与成长<br><pre>交付是团队存在的基础，成长是团队持续的核心。 团队成员的成长 ==〉高质量的交付</pre></p><ul><li>团队成员的成长</li><li>高质量的交付</li></ul></li><li><p>技术与方法<br>技术是IT行业的根本。技术可以贯穿整个IT团队，也是IT团队的灵魂，凝聚力的关键。方法则为技术铺平道路。</p><ul><li>技术：技术型团队，对技术保持初心，炙热</li><li>方法：敏捷开发，实践</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;交付与成长&lt;br&gt;&lt;pre&gt;交付是团队存在的基础，成长是团队持续的核心。 团队成员的成长 ==〉高质量的交付&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队成员的成长&lt;/li&gt;
&lt;li&gt;高质量的交付&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;技术与方法&lt;
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="团队" scheme="http://hi2048.github.io/tags/%E5%9B%A2%E9%98%9F/"/>
    
      <category term="Scrum Master" scheme="http://hi2048.github.io/tags/Scrum-Master/"/>
    
  </entry>
  
  <entry>
    <title>腐烂的橘子一</title>
    <link href="http://hi2048.github.io/2020/09/09/%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/"/>
    <id>http://hi2048.github.io/2020/09/09/腐烂的橘子/</id>
    <published>2020-09-08T16:00:00.000Z</published>
    <updated>2021-08-09T14:47:31.828Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>腐烂的橘子</p><pre><code>在给定的网格中，每个单元格可以有以下三个值之一：0 空单元格, 1 新鲜橘子, 2 腐烂的橘子。每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。返回网格中没有新鲜橘子必须经过的最小分钟数。如果不可能，返回 -1。const isAllRotting = grid =&gt; {  for(let row of grid) {      for(let col of row) {          if(col === 1)              return false;      }  }  return true;}const isInGrid = (i, j, grid) =&gt; {  if(i &gt;= 0 &amp;&amp; j &gt;= 0 &amp;&amp; i &lt; grid.length &amp;&amp; j &lt; grid[i].length) {      return true;  }  return false;}const rotting = grid =&gt; {  const nextGrid = copyGrid(grid);  for(let i = 0; i &lt; grid.length; i++) {      for(let j = 0; j &lt; grid[i].length; j++) {          if(grid[i][j] === 2) {              if(isInGrid(i - 1, j, grid) &amp;&amp; nextGrid[i - 1][j] === 1) {                  nextGrid[i - 1][j] = 2;              }              if(isInGrid(i + 1, j, grid) &amp;&amp; nextGrid[i + 1][j] === 1) {                  nextGrid[i + 1][j] = 2;              }              if(isInGrid(i, j - 1, grid) &amp;&amp; nextGrid[i][j - 1] === 1) {                  nextGrid[i][j - 1] = 2;              }              if(isInGrid(i, j + 1, grid) &amp;&amp; nextGrid[i][j + 1] === 1) {                  nextGrid[i][j + 1] = 2;              }          }      }  }  return nextGrid;}const sameGrid = (grid, nextGrid) =&gt; {  for(let i = 0; i &lt; grid.length; i++) {      for(let j = 0; j &lt; grid[i].length; j++) {          if(grid[i][j] !== nextGrid[i][j]) {              return false;          }      }  }  return true;}const copyGrid = grid =&gt; {  let nextGrid = [];  for(let row of grid){      nextGrid.push(row.slice());  }  return nextGrid;}const orangesRotting = grid =&gt; {  let count = 0;  let nextGrid = grid;  while(!isAllRotting(nextGrid)){    if(count &gt; 0 &amp;&amp; sameGrid(grid, nextGrid)) {      return -1;    }    count++;    grid = nextGrid;    nextGrid = rotting(grid);  }  return count;};</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;腐烂的橘子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在给定的网格中，每个单元格可以有以下三个值之一：
0 空单元格, 1 新鲜橘子, 2 腐烂的橘子。
每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。
返回网格中没有新鲜橘子必须经过的最小分钟数
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="JavaScript" scheme="http://hi2048.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://hi2048.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="http://hi2048.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>剑雨有感</title>
    <link href="http://hi2048.github.io/2020/08/06/%E5%89%91%E9%9B%A8%E6%9C%89%E6%84%9F/"/>
    <id>http://hi2048.github.io/2020/08/06/剑雨有感/</id>
    <published>2020-08-05T16:00:00.000Z</published>
    <updated>2021-08-06T11:09:15.321Z</updated>
    
    <content type="html"><![CDATA[<p>佛陀阿难出家前，在道上见一美貌少女，从此爱慕难舍。佛祖问他：你有多喜欢那少女？ 阿难回答： 愿化身为青石桥，受五百年风吹，五百年日晒，五百年雨打， 只求那少女从桥上走过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;佛陀阿难出家前，在道上见一美貌少女，从此爱慕难舍。佛祖问他：你有多喜欢那少女？ 阿难回答： 愿化身为青石桥，受五百年风吹，五百年日晒，五百年雨打， 只求那少女从桥上走过。&lt;/p&gt;

      
    
    </summary>
    
      <category term="杂谈" scheme="http://hi2048.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>数组中有效三角形的数量</title>
    <link href="http://hi2048.github.io/2020/07/12/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%95%B0%E9%87%8F/"/>
    <id>http://hi2048.github.io/2020/07/12/数组中有效三角形的数量/</id>
    <published>2020-07-11T16:00:00.000Z</published>
    <updated>2021-08-04T10:04:22.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>数组nums中有效三角形的数量</p><pre><code>  var triangleNumber = function(nums) {    let count = 0;    nums.sort((a, b) =&gt; a - b);    for(let i = nums.length - 1; i &gt;= 2; i--) {        let j = i - 1, k = 0;        while(k &lt; j) {            if(nums[k] + nums[j] &gt; nums[i]) {                count += j - k;                j--;            } else {                k++;            }        }    }    return count;};</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组nums中有效三角形的数量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var triangleNumber = function(nums) {
    let count = 0;

    nums.sort((a, b) =&amp;gt; a - b);

 
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="JavaScript" scheme="http://hi2048.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://hi2048.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SMART原则</title>
    <link href="http://hi2048.github.io/2020/06/08/SMART%E5%8E%9F%E5%88%99/"/>
    <id>http://hi2048.github.io/2020/06/08/SMART原则/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2021-08-04T04:41:48.617Z</updated>
    
    <content type="html"><![CDATA[<p><strong> SMART原则（S=Specific、M=Measurable、A=Attainable、R=Relevant、T=Time-bound）</strong></p><ol><li>绩效指标必须是具体的（Specific）</li><li>绩效指标必须是可以衡量的（Measurable）</li><li>绩效指标必须是可以达到的（Attainable）</li><li>绩效指标是要与其他目标具有一定的相关性(Relevant)</li><li>绩效指标必须具有明确的截止期限（Time-bound）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; SMART原则（S=Specific、M=Measurable、A=Attainable、R=Relevant、T=Time-bound）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绩效指标必须是具体的（Specific）&lt;/li&gt;
&lt;li&gt;绩效指标必须
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Agile" scheme="http://hi2048.github.io/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>GCP</title>
    <link href="http://hi2048.github.io/2020/05/25/GCP/"/>
    <id>http://hi2048.github.io/2020/05/25/GCP/</id>
    <published>2020-05-24T16:00:00.000Z</published>
    <updated>2021-08-04T04:36:32.442Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Computer Engine, App Engine</p></li><li><p>HTTPS load balance</p></li><li><p>Stackdriver</p></li><li><p>Datastore</p></li><li><p>BigQuery</p></li><li><p>Cloud Pub/Sub</p></li><li><p>Cloud storage</p></li><li><p>Cloud Dataflow</p></li><li><p>Cloud Endpoints</p></li><li><p>Cloud SQL</p></li><li><p>Hadoop/Spark</p></li><li><p>Cloud dataproc</p></li><li><p>Jenkins</p></li><li><p>Cloud BigTable</p></li><li><p>Cloud Memorystore</p></li><li><p>Cloud Datastore</p></li><li><p>k8s(Kubernetes)/Containers</p></li><li><p>Cloud Marketplace</p></li><li><p>CDN</p></li><li><p>Local SSD, SSD persistent disks</p></li><li><p>Cloud VPN</p></li><li><p>Cloud Functions</p></li><li><p>CSEK</p></li><li><p>Firewall rules</p></li><li><p>ETL</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Computer Engine, App Engine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTPS load balance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stackdriver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Datastore&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="GCP" scheme="http://hi2048.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>logger</title>
    <link href="http://hi2048.github.io/2020/04/12/logger/"/>
    <id>http://hi2048.github.io/2020/04/12/logger/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2021-08-04T04:36:35.137Z</updated>
    
    <content type="html"><![CDATA[<p>– logger <a href="https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/log" title="logger" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-utils/" title="logger" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsimport { isFunction, isString } from &apos;../type&apos;;const log = type =&gt; (target, name, descriptor) =&gt; {  if(isFunction(target[name])) {    const originFunction = descriptor.value;    descriptor.value = function(...args) {      console.log(`${target.constructor.name}: `);      console.log(`${type} start: ${name} (${args}).`);      try {        const ret = originFunction.call(this, ...args);        console.log(`${type} succeed: ${name} (${args} =&gt; ${ret}).`);      } catch(err) {        console.log(`${type} failed: ${name} (${args} =&gt; ${err}).`);      }    }  }  return descriptor;}export const logger = (...args) =&gt; {  if(!isString(args[0])) {    return log(&apos;&apos;)(...args);  }  return log(...args);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– logger &lt;a href=&quot;https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/log&quot; title=&quot;logger&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gi
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>creater</title>
    <link href="http://hi2048.github.io/2020/03/20/creater/"/>
    <id>http://hi2048.github.io/2020/03/20/creater/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2021-08-04T04:36:40.407Z</updated>
    
    <content type="html"><![CDATA[<p>– creater <a href="https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/creater" title="creater" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-utils/" title="creater" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsimport { isFunction } from &apos;../type&apos;;export const creater = Target =&gt; config =&gt; class {  constructor(...args) {    if(isFunction(config)) {      return new Target(config, ...args);    }    return new Target(Object.assign(config, ...args));  }};const builder = creater =&gt; array =&gt; array.map(item =&gt; creater(item));export const factory = Target =&gt; builder(creater(Target));</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– creater &lt;a href=&quot;https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/creater&quot; title=&quot;creater&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>unicode</title>
    <link href="http://hi2048.github.io/2020/03/08/unicode/"/>
    <id>http://hi2048.github.io/2020/03/08/unicode/</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-14T19:09:03.238Z</updated>
    
    <content type="html"><![CDATA[<p>– unicode <a href="https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/unicode" title="unicode" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-utils/" title="unicode" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsimport { isFunction } from &apos;../type&apos;;import { random } from &apos;../random&apos;;import { familyNames, firstNames } from &apos;./index.config&apos;;export const encode = str =&gt; `\\u${Array.from(str).map(char =&gt; `00${char.charCodeAt().toString(16)}`.slice(-4)).join(&apos;\\u&apos;)}`;export const decode = par =&gt; {  let str = par;  if(isFunction(par)) {    str = par();  }  return unescape(str.replace(/\\/g, &apos;%&apos;));};export const create = () =&gt; `\\u${(random(20901) + 19968).toString(16)}`;export const createWord = () =&gt; decode(create);export const createRandomName = () =&gt; {  const count = random(2, 4);  const result = [];  for(let i = 0; i &lt; count; i++) {    result.push(createWord());  }  return result.join(&apos;&apos;);};export const createName = () =&gt; {  return `${familyNames[random(familyNames.length)]}${firstNames[random(firstNames.length)]}`;};export const unicode = {  encode,  decode,  create,  createWord,  createName,  createRandomName};-- index.test.jsimport { encode, decode, create, createWord, createName, createRandomName } from &apos;.&apos;;test(&apos;encode&apos;, () =&gt; expect(encode(&apos;苏小蜂&apos;)).toBe(&quot;\\u82cf\\u5c0f\\u8702&quot;));test(&apos;decode&apos;, () =&gt; expect(decode(&apos;\\u82cf\\u5c0f\\u8702&apos;)).toBe(&apos;苏小蜂&apos;));test(&apos;create&apos;, () =&gt; expect(create()).toBeDefined());test(&apos;create&apos;, () =&gt; expect(createWord()).toBeDefined());test(&apos;create&apos;, () =&gt; expect(createName()).toBeDefined());test(&apos;create&apos;, () =&gt; expect(createRandomName()).toBeDefined());</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– unicode &lt;a href=&quot;https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/unicode&quot; title=&quot;unicode&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>简单对象</title>
    <link href="http://hi2048.github.io/2020/03/06/%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hi2048.github.io/2020/03/06/简单对象/</id>
    <published>2020-03-05T16:00:00.000Z</published>
    <updated>2020-03-14T19:08:17.499Z</updated>
    
    <content type="html"><![CDATA[<p>– isPlainObject <a href="https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/isPlainObject" title="isPlainObject" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-utils/" title="isPlainObject" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsimport { isObject } from &apos;../type&apos;;export const isPlainObject = obj =&gt; {  if(isObject(obj)) {    return Object.getPrototypeOf(obj) === Object.prototype;  }  return false;};-- index.test.jsimport { isPlainObject } from &apos;.&apos;;test(&quot;isPlainObject&quot;, () =&gt; expect(isPlainObject({ x: 1 })).toBeTruthy());test(&quot;isPlainObject&quot;, () =&gt; expect(isPlainObject(new Object({ x: 1 }))).toBeTruthy());test(&quot;isPlainObject&quot;, () =&gt; expect(isPlainObject(new class Test{})).toBeFalsy());</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– isPlainObject &lt;a href=&quot;https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/isPlainObject&quot; title=&quot;isPlainObject&quot; target=&quot;_
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>array基本操作</title>
    <link href="http://hi2048.github.io/2020/02/25/array%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://hi2048.github.io/2020/02/25/array基本操作/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2020-03-14T19:07:33.558Z</updated>
    
    <content type="html"><![CDATA[<p>– array <a href="https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/array" title="array" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-utils/" title="array" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsexport const add = array =&gt; item =&gt; array.push(item);export const remove = array =&gt; item =&gt; array = array.filter(v =&gt; v !== item);export const array = { add, remove };</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– array &lt;a href=&quot;https://github.com/hi2048/hi2048-utils/tree/master/site/src/utils/array&quot; title=&quot;array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gi
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>curry, compose and pipe</title>
    <link href="http://hi2048.github.io/2020/02/20/curry-compose-and-pipe/"/>
    <id>http://hi2048.github.io/2020/02/20/curry-compose-and-pipe/</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2020-02-29T12:51:42.148Z</updated>
    
    <content type="html"><![CDATA[<p>– curry, compose, pipe实现 <a href="https://github.com/hi2048/utils/tree/master/curry" title="curry" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a></p><pre><code>-- index.js/*** * @param  {...function} funs * f1, f2, f3 ... = f1(f2(f3(...)))*/const compose = (...funs) =&gt; funs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)));/*** * @param  {...function} funs * f1, f2, f3 ... = ...f3(f2(f1(args)))*/const pipe = (...funs) =&gt; compose(...funs.reverse());/*** * @param {function} fun * @param {array} args * f(a, b, c, ...) = f(a)(b)(c)...*/const curry = (fun, args = []) =&gt; args.length === fun.length?fun(...args) : (...arg1) =&gt; curry(fun, [...args, ...arg1]);module.exports = { compose, pipe, curry };-- index.test.jsconst assert = require(&apos;assert&apos;);const { compose, pipe, curry } = require(&apos;.&apos;);assert.equal(compose(Math.abs, a =&gt; a + 1, a =&gt; Math.pow(a, 2))(10), 101);assert.equal(pipe(Math.abs, a =&gt; a + 1, a =&gt; Math.pow(a, 2))(-10), 121);assert.equal(curry((a, b, c) =&gt; a + b - c)(10)(9)(11), 8);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– curry, compose, pipe实现 &lt;a href=&quot;https://github.com/hi2048/utils/tree/master/curry&quot; title=&quot;curry&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>DynamicNumber</title>
    <link href="http://hi2048.github.io/2020/02/10/DynamicNumber/"/>
    <id>http://hi2048.github.io/2020/02/10/DynamicNumber/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2020-02-26T08:19:00.631Z</updated>
    
    <content type="html"><![CDATA[<p>– 数字跳动控件 <a href="https://github.com/hi2048/hi2048-design/tree/master/site/src/components/dynamicNumber" title="DynamicNumber" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-design" title="hi2048-design" target="_blank" rel="noopener">npm</a>  <a href="http://blog.hi2048.com/hi2048-design/" title="DynamicNumber" target="_blank" rel="noopener">demo</a></p><pre><code>-- index.jsimport React, { useState, useEffect } from &apos;react&apos;;import { NORMAL, getSpeed } from &apos;./config&apos;;import { random } from &apos;hi2048-utils&apos;;import &apos;./style.css&apos;;export const DynamicNumber = props =&gt; {  const { start = 100, end = 0, stepping = 1, isRandom = true, speed = NORMAL } = props;  const [count, setCount] = useState(start);  const dynamic = () =&gt; {    let dynamicStepping = stepping;    let distance = end - start;    const direction = distance &lt; 0?-1 : 1;    const timer = setInterval(() =&gt; {      if(isRandom) {        dynamicStepping = random(stepping);      }      if(Math.abs(distance) &lt; dynamicStepping) {        distance = 0;        setCount(end);        return clearInterval(timer);      }      distance -= dynamicStepping * direction;      setCount(count =&gt; count + dynamicStepping * direction);    }, getSpeed(speed))  }  useEffect(dynamic, []);  return (    &lt;div className=&quot;hi2048 dynamic-number-container&quot;&gt;      &lt;span className=&quot;counter&quot;&gt;{ count }&lt;/span&gt;    &lt;/div&gt;  );};-- config.jsconst SPEED_TYPES = {  FASTER: &apos;faster&apos;,  FAST: &apos;fast&apos;,  NORMAL: &apos;normal&apos;,  SLOW: &apos;slow&apos;,  SLOWER: &apos;slower&apos;};export const { FASTER, FAST, NORMAL, SLOW, SLOWER } = SPEED_TYPES;export const getSpeed = speed =&gt; {  switch(speed.toLowerCase()) {    case FASTER:      return 25;    case FAST:      return 50;    case NORMAL:      return 100;    case SLOW:      return 150;    case SLOWER:      return 200;  }};-- style.css.hi2048.dynamic-number-container {  &amp; .counter {    display: inline-block;    height: 22px;    width: auto;    min-width: 48px;    text-align: center;    color: #555;  }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– 数字跳动控件 &lt;a href=&quot;https://github.com/hi2048/hi2048-design/tree/master/site/src/components/dynamicNumber&quot; title=&quot;DynamicNumber&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="React" scheme="http://hi2048.github.io/tags/React/"/>
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-design" scheme="http://hi2048.github.io/tags/hi2048-design/"/>
    
  </entry>
  
  <entry>
    <title>类型判断</title>
    <link href="http://hi2048.github.io/2020/01/08/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://hi2048.github.io/2020/01/08/类型判断/</id>
    <published>2020-01-07T16:00:00.000Z</published>
    <updated>2020-02-29T12:44:07.258Z</updated>
    
    <content type="html"><![CDATA[<p>– 基本数据类型判断 <a href="https://github.com/hi2048/utils/tree/master/type" title="类型判断" target="_blank" rel="noopener">github</a>  <a href="https://www.npmjs.com/package/hi2048-utils" title="hi2048-utils" target="_blank" rel="noopener">npm</a></p><pre><code>-- type.jsconst types = {  &apos;Number&apos;: &apos;Number&apos;,  &apos;String&apos;: &apos;String&apos;,  &apos;Boolean&apos;: &apos;Boolean&apos;,  &apos;Object&apos;: &apos;Object&apos;,  &apos;Array&apos;: &apos;Array&apos;,  &apos;Function&apos;: &apos;Function&apos;,  &apos;Date&apos;: &apos;Date&apos;,  &apos;RegExp&apos;: &apos;RegExp&apos;,  &apos;Symbol&apos;: &apos;Symbol&apos;,  &apos;null&apos;: &apos;Null&apos;,  &apos;NaN&apos;: &apos;NaN&apos;,  &apos;undefined&apos;: &apos;Undefined&apos;};const isType = type =&gt; obj =&gt; Object.prototype.toString.call(obj) === `[object ${type}]`;const isTypeFactory = types =&gt; {  const isTypes = {};  for(let key of Object.keys(types)) {    if(types[key] === &apos;NaN&apos;) {      isTypes[&apos;isNaN&apos;] = isNaN;    } else if(types[key] === &apos;Number&apos;) {      isTypes[&apos;isNumber&apos;] = obj =&gt; {        if(isNaN(obj)) {          return false;        }        return isType(types[key])(obj);      };    } else {      isTypes[`is${types[key]}`] = isType(types[key]);    }  }  return isTypes;};module.exports = { isNumber, isString, isBoolean, isObject, isArray, isFunction, isDate, isRegExp, isSymbol, isNull, isNaN, isUndefined } = isTypeFactory(types);-- type.test.jsconst assert = require(&apos;assert&apos;);const { isNumber, isString, isBoolean, isObject, isArray, isFunction, isDate, isRegExp, isSymbol, isNull, isNaN, isUndefined } = require(&apos;.&apos;);assert.equal(isNumber(1), true);assert.equal(isNumber(&apos;a&apos;), false);assert.equal(isNumber(NaN), false);assert.equal(isString(&apos;a&apos;), true);assert.equal(isString({&apos;a&apos;: 1}), false);assert.equal(isBoolean(true), true);assert.equal(isBoolean(&apos;true&apos;), false);assert.equal(isObject({&apos;a&apos;: 1}), true);assert.equal(isObject([1,2]), false);assert.equal(isArray([1,2]), true);assert.equal(isArray({&apos;a&apos;: 1}), false);assert.equal(isFunction(console.log), true);assert.equal(isFunction(&apos;a&apos;), false);assert.equal(isDate(new Date()), true);assert.equal(isDate(&apos;a&apos;), false);assert.equal(isRegExp(/.*/g), true);assert.equal(isRegExp(&apos;a&apos;), false);assert.equal(isSymbol(Symbol()), true);assert.equal(isSymbol(&apos;a&apos;),false);assert.equal(isNull(null), true);assert.equal(isNull(&apos;null&apos;), false);assert.equal(isNaN(NaN), true);assert.equal(isNaN(&apos;NaN&apos;), true);assert.equal(isNaN(1), false);assert.equal(isUndefined(undefined), true);assert.equal(isUndefined(&apos;undefined&apos;), false);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– 基本数据类型判断 &lt;a href=&quot;https://github.com/hi2048/utils/tree/master/type&quot; title=&quot;类型判断&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;  &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="hi2048" scheme="http://hi2048.github.io/tags/hi2048/"/>
    
      <category term="hi2048-utils" scheme="http://hi2048.github.io/tags/hi2048-utils/"/>
    
  </entry>
  
  <entry>
    <title>最大最小值</title>
    <link href="http://hi2048.github.io/2019/12/25/%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>http://hi2048.github.io/2019/12/25/最大最小值/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2020-02-29T12:55:29.878Z</updated>
    
    <content type="html"><![CDATA[<p>– min and max value in args(array or numbers). </p><pre><code>const min = (...args) =&gt; {  return args.reduce((a, b) =&gt; {    b = Array.isArray(b)?min(...b) : b;    return a &lt; b?a : b;  }, Infinity);}const max = (...args) =&gt; {  return args.reduce((a, b) =&gt; {    b = Array.isArray(b)?max(...b) : b;    return a &gt; b?a : b;  }, -Infinity);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– min and max value in args(array or numbers). &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const min = (...args) =&amp;gt; {
  return args.reduce((a, b) =&amp;gt; {
    b = 
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="utils" scheme="http://hi2048.github.io/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>“气球”的最大数量</title>
    <link href="http://hi2048.github.io/2019/11/18/%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/"/>
    <id>http://hi2048.github.io/2019/11/18/“气球”的最大数量/</id>
    <published>2019-11-17T16:00:00.000Z</published>
    <updated>2020-02-04T10:40:23.883Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 “balloon”（气球）。 </strong><br><strong> 字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 “balloon”。 </strong></p><pre><code>const min = (...args) =&gt; {  return args.reduce((a, b) =&gt; a &lt; b?a : b);}var maxNumberOfBalloons = function(text) {    const hash = {b: 0, a: 0, l: 0, o: 0, n: 0};    for(let c of text) {        hash[c] = hash[c]?(++hash[c]) : 1;    }    return min(hash[&apos;b&apos;], hash[&apos;a&apos;], Math.floor(hash[&apos;l&apos;] / 2), Math.floor(hash[&apos;o&apos;] / 2), hash[&apos;n&apos;]);};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 “balloon”（气球）。 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 “balloon”。
      
    
    </summary>
    
      <category term="设计与代码" scheme="http://hi2048.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="leetcode" scheme="http://hi2048.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
